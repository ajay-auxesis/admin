{
  "_args": [
    [
      {
        "raw": "ng2-uploader@^2.0.0",
        "scope": null,
        "escapedName": "ng2-uploader",
        "name": "ng2-uploader",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "D:\\projects\\project\\Adminpanel\\cryptoTradingAdminPanelgit"
    ]
  ],
  "_from": "ng2-uploader@>=2.0.0 <3.0.0",
  "_id": "ng2-uploader@2.0.0",
  "_inCache": true,
  "_location": "/ng2-uploader",
  "_nodeVersion": "7.3.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/ng2-uploader-2.0.0.tgz_1482447670415_0.2567266123369336"
  },
  "_npmUser": {
    "name": "jkuri",
    "email": "jkuri88@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ng2-uploader@^2.0.0",
    "scope": null,
    "escapedName": "ng2-uploader",
    "name": "ng2-uploader",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ng2-uploader/-/ng2-uploader-2.0.0.tgz",
  "_shasum": "5b81140cd813552d57bf4578da57edc5261e93e7",
  "_shrinkwrap": null,
  "_spec": "ng2-uploader@^2.0.0",
  "_where": "D:\\projects\\project\\Adminpanel\\cryptoTradingAdminPanelgit",
  "author": {
    "name": "Jan Kuri",
    "email": "jkuri88@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/jkuri/ng2-uploader/issues"
  },
  "dependencies": {},
  "description": "Angular2 File Uploader",
  "devDependencies": {
    "@angular/common": "^2.4.1",
    "@angular/compiler": "^2.4.1",
    "@angular/compiler-cli": "^2.4.1",
    "@angular/core": "^2.4.1",
    "@angular/platform-browser": "^2.4.1",
    "@angular/platform-browser-dynamic": "^2.4.1",
    "@angular/platform-server": "^2.4.1",
    "@types/core-js": "^0.9.35",
    "@types/node": "^6.0.52",
    "reflect-metadata": "^0.1.9",
    "rxjs": "5.0.1",
    "typescript": "2.0.10",
    "zone.js": "^0.7.4"
  },
  "directories": {},
  "dist": {
    "shasum": "5b81140cd813552d57bf4578da57edc5261e93e7",
    "tarball": "https://registry.npmjs.org/ng2-uploader/-/ng2-uploader-2.0.0.tgz"
  },
  "gitHead": "587182104df11ccc3b4c6b3c3cfe55089fc83cbe",
  "homepage": "https://github.com/jkuri/ng2-uploader#readme",
  "keywords": [
    "ng2",
    "angular",
    "angular2",
    "file",
    "upload",
    "uploader"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jkuri",
      "email": "jkuri88@gmail.com"
    }
  ],
  "name": "ng2-uploader",
  "optionalDependencies": {},
  "readme": "# ng2-uploader\n\nFor demos please see [demos page](http://ng2-uploader.com).\n\n## Angular2 File Uploader\n\n### Installation\n\n```\nnpm install ng2-uploader --save\n```\n\n### Available parameters\n\n|Parameter   \t| Example Value\n|---\t       |---\t|\n| url   \t    | http://api.ng2-uploader.com:10050  \t|\n| filterExtensions | true/false |\n| allowedExtensions | ['image/png', 'image/jpg'] or ['jpg', 'png'] |\n| calculateSpeed | true/false |\n| data          | { userId: 12, isAdmin: true } |\n| customHeaders  | { 'custom-header': 'value' } |\n| fieldName      | 'user[avatar]'\n| fieldReset     | true/false\n| authToken      | 012313asdadklj123123 |\n| authTokenPrefix | 'Bearer' (default) |\n\n**All parameters except `url` are optional.**\n\n\n#### Examples\n\n1. [Basic Example](https://github.com/jkuri/ng2-uploader#basic-example)\n2. [Advanced Example](https://github.com/jkuri/ng2-uploader#advanced-example)\n\n#### Backend Examples\n\n1. [NodeJS using HapiJS](https://github.com/jkuri/ng2-uploader#backend-example-using-hapijs)\n2. [NodeJS using express](https://github.com/jkuri/ng2-uploader#backend-example-using-express)\n3. [PHP (Plain)](https://github.com/jkuri/ng2-uploader#backend-example-using-plain-php)\n\n### Basic Example\n\n````ts\n// app.module.ts\nimport { Ng2UploaderModule } from 'ng2-uploader';\n...\n@NgModule({\n  ...\n  imports: [\n    Ng2UploaderModule\n  ],\n  ...\n})\n// app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'demo-app',\n  templateUrl: 'app/demo.html'\n})\nexport class DemoApp {\n  uploadFile: any;\n  hasBaseDropZoneOver: boolean = false;\n  options: Object = {\n    url: 'http://localhost:10050/upload'\n  };\n  sizeLimit = 2000000;\n\n  handleUpload(data): void {\n    if (data && data.response) {\n      data = JSON.parse(data.response);\n      this.uploadFile = data;\n    }\n  }\n\n  fileOverBase(e:any):void {\n    this.hasBaseDropZoneOver = e;\n  }\n\n  beforeUpload(uploadingFile): void {\n    if (uploadingFile.size > this.sizeLimit) {\n      uploadingFile.setAbort();\n      alert('File is too large');\n    }\n  }\n}\n````\n\n````html\n<!-- app.component.html -->\n<input type=\"file\"\n       ngFileSelect\n       [options]=\"options\"\n       (onUpload)=\"handleUpload($event)\"\n       (beforeUpload)=\"beforeUpload($event)\">\n\n<!-- drag & drop file example-->\n<style>\n  .file-over { border: dotted 3px red; } /* Default class applied to drop zones on over */\n</style>\n<div ngFileDrop\n     [options]=\"options\"\n     (onUpload)=\"handleUpload($event)\"\n     [ngClass]=\"{'file-over': hasBaseDropZoneOver}\"\n     (onFileOver)=\"fileOverBase($event)\"\n     (beforeUpload)=\"beforeUpload($event)\">\n</div>\n\n<div>\nResponse: {{ uploadFile | json }}\n</div>\n````\n\n### Advanced Example\n\nThis example show how to use available options and progress.\n\n```ts\nimport { Component, OnInit, NgZone } from '@angular/core';\n\n@Component({\n  selector: 'app-component',\n  templateUrl: 'app.component.html'\n})\nexport class AppDemoComponent implements OnInit {\n  private zone: NgZone;\n  private options: Object;\n  private progress: number = 0;\n  private response: any = {};\n\n  ngOnInit() {\n    this.zone = new NgZone({ enableLongStackTrace: false });\n    this.options = {\n      url: 'http://api.ng2-uploader.com:10050/upload',\n      filterExtensions: true,\n      allowedExtensions: ['image/png', 'image/jpg'],\n      calculateSpeed: true,\n      data: {\n        userId: 12,\n        isAdmin: true\n      },\n      customHeaders: {\n        'custom-header': 'value'\n      },\n      authToken: 'asd123b123zxc08234cxcv',\n      authTokenPrefix: 'Bearer'\n    };\n  }\n\n  handleUpload(data: any): void {\n    this.zone.run(() => {\n      this.response = data;\n      this.progress = Math.floor(data.progress.percent / 100);\n    });\n  }\n}\n```\n\n\n### Backend Example Using HapiJS\n\n````javascript\n'use strict';\n\nconst Hapi        = require('hapi');\nconst Inert       = require('inert');\nconst Md5         = require('md5');\nconst Multiparty  = require('multiparty');\nconst fs          = require('fs');\nconst path        = require('path');\nconst server      = new Hapi.Server();\n\nserver.connection({ port: 10050, routes: { cors: true } });\nserver.register(Inert, (err) => {});\n\nconst upload = {\n  payload: {\n    maxBytes: 209715200,\n    output: 'stream',\n    parse: false\n  },\n  handler: (request, reply) => {\n    const form = new Multiparty.Form();\n    form.parse(request.payload, (err, fields, files) => {\n      if (err) {\n        return reply({status: false, msg: err});\n      }\n\n      let responseData = [];\n\n      files.file.forEach((file) => {\n        let fileData = fs.readFileSync(file.path);\n        const originalName = file.originalFilename;\n        const generatedName = Md5(new Date().toString() +\n          originalName) + path.extname(originalName);\n        const filePath = path.resolve(__dirname, 'uploads',\n          generatedName);\n\n        fs.writeFileSync(filePath, fileData);\n        const data = {\n          originalName: originalName,\n          generatedName: generatedName\n        };\n\n        responseData.push(data);\n      });\n\n      reply({status: true, data: responseData});\n    });\n  }\n};\n\nconst uploads = {\n  handler: {\n    directory: {\n      path: path.resolve(__dirname, 'uploads')\n    }\n  }\n};\n\nserver.route([\n  { method: 'POST', path: '/upload',          config: upload  },\n  { method: 'GET',  path: '/uploads/{path*}', config: uploads }\n]);\n\nserver.start(() => {\n  console.log('Upload server running at', server.info.uri);\n});\n````\n\n### Backend example using express\n\n````js\nconst express = require('express');\nconst cors = require('cors');\nconst multer = require('multer');\nconst path = require('path');\n\nconst app = express();\napp.use(cors());\n\nconst upload = multer({\n  dest: 'uploads/',\n  storage: multer.diskStorage({\n    filename: (req, file, cb) => {\n      let ext = path.extname(file.originalname);\n      cb(null, `${Math.random().toString(36).substring(7)}${ext}`);\n    }\n  })\n});\n\napp.post('/upload', upload.any(), (req, res) => {\n  res.json(req.files.map(file => {\n    let ext = path.extname(file.originalname);\n    return {\n      originalName: file.originalname,\n      filename: file.filename\n    }\n  }));\n});\n\napp.listen(10050, () => {\n  console.log('ng2-uploader server running on port 10050.');\n});\n````\n\n### Backend example using plain PHP\n\n````php\n<?php\n\nheader(\"Access-Control-Allow-Origin: *\");\n\nif ($_SERVER['REQUEST_METHOD'] !== 'POST') {\n  echo json_encode(array('status' => false));\n  exit;\n}\n\n$path = 'uploads/';\n\nif (isset($_FILES['file'])) {\n  $originalName = $_FILES['file']['name'];\n  $ext = '.'.pathinfo($originalName, PATHINFO_EXTENSION);\n  $generatedName = md5($_FILES['file']['tmp_name']).$ext;\n  $filePath = $path.$generatedName;\n\n  if (!is_writable($path)) {\n    echo json_encode(array(\n      'status' => false,\n      'msg'    => 'Destination directory not writable.'\n    ));\n    exit;\n  }\n\n  if (move_uploaded_file($_FILES['file']['tmp_name'], $filePath)) {\n    echo json_encode(array(\n      'status'        => true,\n      'originalName'  => $originalName,\n      'generatedName' => $generatedName\n    ));\n  }\n}\nelse {\n  echo json_encode(\n    array('status' => false, 'msg' => 'No file uploaded.')\n  );\n  exit;\n}\n\n?>\n````\n\n### Demos\n\nFor more information, examples and usage examples please see [demos](http://ng2-uploader.com)\n\n#### LICENCE\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jkuri/ng2-uploader.git"
  },
  "scripts": {
    "build": "ngc -p tsconfig.json",
    "clean": "./scripts/clean.sh",
    "dev": "tsc --watch",
    "prepublish": "npm run build"
  },
  "typings": "index.d.ts",
  "version": "2.0.0"
}
